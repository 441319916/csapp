第 3 章 程序的机器级表示

超线程（hyperthreading）：在一个处理器上同时运行两个程序。
    p104

IA32（Intel Architecture 32-bit）：Intel 32位体系结构
    p104

计算机系统使用了多种不同形式的抽象，利用更简单的抽象模型来隐藏实现的细节。对于机
器级编程来说，其中两种抽象尤为重要。

第一种是机器级程序的格式和行为，定义为指令集体系结构（Instruction set
architecture, ISA），它定义了处理器状态、指令的格式，以及每条指令对状态的影响。

第二种抽象是，机器级程序使用的存储器地址是虚拟地址，提供的存储器模型看上去是一个
非常大的字节数组。
    p106

虽然 C 语言提供了一种模型，可以在存储器中声明和分配各种数据类型的对象，但是机器
代码只是简单地将存储器看成是一个很大的、按字节寻址的数组。C 语言中的聚合数据类型，
例如数组和结构，在机器代码中用连续的一组字节来表示。即使是标量数据类型，汇编代码
也不区分有符号或无符号整数，不区分各种类型的指针，甚至不区分指针和整数。
    p106~p107

(gdb) x/17xb sum

这条命令告诉 GDB 检查（简写为“x”）17 个十六进制格式（也简写为“x”）的字节（简
写为“b”）。
    p108

unix> gcc -O1 -S -masm=intel code.c
    p110

由于是从 16 位体系结构扩展成 32 位的，Intel 用术语“字”（word）表示 16 位数据类型。
因此，称 32 位数为“双字”（double words），称 64 位数位“四字”（quad words）。我们
后面遇到的大多数指令都是对字节或双字操作的。
    p111

大多数指令有一个或多个操作数（operand），指示出执行一个操作中要引用的源数据值，以
及放置结果的目标位置。IA32 支持多种操作数格式。源数据值可以以常数形式给出，或是从
寄存器或存储器中读出。结果可以存放在寄存器或存储器中。因此，各种不同的操作数的可
能性被分为三种类型。

第一种类型是立即数（immediate），也就是常数值。第二种类型是寄存器（register），它
表示某个寄存器的内容。第三种操作数是存储器（memory）引用，它会根据计算出来的地址
（通常称为有效地址）访问某个存储器位置。
    p112~p113

C 语言中所谓的“指针”其实就是地址，局部变量通常是保存在寄存器中，而不是在存储器
中。寄存器访问比存储器访问要快得多。
    p117
