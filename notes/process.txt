
* 进程控制

** getpid/getppid 获取进程 ID

#include <sys/types.h>
#include <unistd.h>

pid_t getpid(void);
pid_t getppid(void);

返回：getpid() 返回进程的 PID，getppid() 返回父进程的 PID

** exit 终止进程

#include <stdlib.h>

void exit(int status);

返回：该函数无返回值

** fork 创建进程

#include <sys/types.h>
#include <unistd.h>

pid_t fork(void);

返回：子进程返回 0，父进程返回子进程的 PID，如果出错，则为 -1

** waitpid/wait 等待子进程的终止或者停止

#include <sys/types.h>
#include <sys/wait.h>

pid_t waitpid(pid_t pid, int *status, int options);

返回：如果成功，则为子进程的 PID，如果 WNOHANG，则为 0，如果其他错误，则为 -1

wait 函数是 waitpid 函数的简单版本

#include <sys/types.h>
#include <sys/wait.h>

pid_t wait(int *status);

返回：如果成功，则为子进程的 PID，如果出错，则为 -1

** sleep/pause 让进程休眠

sleep() 将一个进程挂起一段指定的时间。

#include <unistd.h>

unsigned int sleep(unsigned int secs);

返回：还要休眠的秒数

pause() 让调用函数休眠，直到该进程收到一个信号。

#include <unistd.h>

int pause(void);

返回：总是返回 -1

** execve 加载并运行程序

#include <unistd.h>

int execve(const char *filename, const char *argv[], const char *envp[]);

返回：如果成功，则不返回；如果错误，则返回 -1

** getenv/setenv/unsetenv 操作环境数组

#include <stdlib.h>

char *getenv(const char *name);
int setenv(const char *name, const char *newvalue, int overwrite);
void unsetenv(const char *name);

getenv：若存在则为指向 name 的指针，若无匹配，则为 NULL
setenv：若成功返回 0，若错误返回 -1
unsetenv：无

* 信号处理

** getpgrp/setpgid 获取/设置 进程组 ID

#include <unistd.h>

pid_t getpgrp(void);
int setpgid(pid_t pid, pid_t pgid);

getpgrp: 返回调用进程的进程组 ID
setpgid: 改变自己或其他进程组的 ID。成功返回 0，失败返回 -1

** kill/alarm 发送信号

#include <sys/types.h>
#include <signal.h>

int kill(pid_t pid, int sig);

kill: 发送信号给其它进程（包括它自己）。成功返回 0，失败返回 -1

#include <unistd.h>

unsigned int alarm(unsigned int secs);

alarm: 向自己发送 SIGALARM 信号。返回前一次闹钟剩余的秒数，若以前没有设定闹钟，
       则为 0

** signal 接收信号

#include <signal.h>
typedef void (*sighandler_t)(int);

sighandler_t signal(int signum, sighandler_t handler);

signal: 修改和信号相关联的默认行为。成功则为指向前次处理程序的指针，错误则为
        SIG_ERR（不设置 errno）

** sigaction/sigprocmask 可移植的信号处理

#include <signal.h>

int sigaction(int signum, struct sigaction *act, struct sigaction *oldact);
int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
int sigemptyset(sigset_t *set);
int sigfillset(sigset_t *set);
int sigaddset(sigset_t *set, int signum);
int sigdelset(sigset_t *set, int signum);
int sigmember(const sigset_t *set, int signum);

sigaction: 同下
sigprocmask: 同下
sigemptyset: 同下
sigfillset: 同下
sigaddset: 同下
sigdelset: 成功返回 0，出错返回 -1
sigmember: 若 signum 是 sef 的成员返回 1，如果不是返回 0，出错返回 -1

** setjmp/sigsetjmp/longjmp/siglongjmp 非本地跳转

#include <setjmp.h>

int setjmp(jmp_buf env);
int sigsetjmp(sigjmp_buf env, int savesigs);
void longjmp(jmp_buf env, int retval);
void siglongjmp(sigjmp_buf env, int retval);

setjmp: 返回 0
