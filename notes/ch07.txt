第 7 章 链接

链接（linking）是将各种代码和数据部分收集起来并组合成为一个单一文件的过程，这个
文件可被加载（或被拷贝）到存储器并执行。

链接可以执行于编译时（compile time），也就是在源代码被翻译成机器代码时；也可以执
行于加载时（load time），也就是在程序被加载器（loader）加载到存储器并执行时；甚
至执行于运行时（run time），由应用程序来执行。

在早期的计算机系统中，链接是手动执行的。在现代系统中，链接是由叫做链接器（linker）
的程序自动执行的。
        p448

链接器在软件开发中扮演着一个关键的角色，因为它们使得分离编译（separate
compilation）成为可能。我们不用将一个大型的应用程序组织为一个巨大的源文件，而是
可以把它分解为更小、更好管理的模块，可以独立地修改和编译这些模块。当我们改变这些
模块中的一个时，只需简单地重新编译它，并重新链接应用，而不必重新编译其他文件。
        p448

为什么要这么麻烦地学习关于链接的知识呢？

    o 理解链接器将帮助你构造大型程序

      构造大型程序的程序员经常会遇到由于缺少模块、缺少库或者不兼容的库版本引起的
      链接器错误。除非你理解链接器是如何解析引用、什么是库以及链接器是如何使用库
      来解析引用的，否则这类错误将令你感到迷惑和挫败。

    o 理解链接器将帮助你避免一些危险的编程错误

      UNIX 链接器解析符号引用时所做的决定可以不动声色地影响你程序的正确性。在默
      认情况下，错误地定义多个全局变量的程序将通过链接器，而不产生任何警告信息。
      由此得到的程序会产生令人迷惑的运行时行为，而且非常难以调试。我们将向你展示
      这是如何发生的，以及该如何避免它。

    o 理解链接器将帮助你理解语言的作用域规则是如何实现的

      例如，全局和局部变量之间的区别是什么？当你定义一个具有 static 属性的变量或
      函数时，到底实际意味着什么？

    o 理解链接器将帮助你理解其他重要的系统概念

      链接器产生的可执行目标文件在重要的系统功能中扮演着关键角色，比如加载和运行
      程序、虚拟存储器、分页和存储器映射。

    o 理解链接器将使你能够利用共享库

      多年以来，链接都被认为是相当简单和无趣的。然而，随着共享库和动态链接在现代
      操作系统中重要性的日益加强，链接成为一个复杂的过程，它为知识丰富的程序员提
      供了强大的能力。比如，许多软件产品在运行时使用共享库来升级压缩包装的
      （shrink-wrapped）二进制程序。还有，大多数 Web 服务器都依赖于共享库的动态
      链接来提供动态内容。
        p448

无论是什么样的操作系统、ISA 或者目标文件格式，基本的链接概念是通用的，认识到这一
点是很重要的。
        p448

大多数编译系统提供编译驱动程序（compiler driver），它代表用户在需要时调用语言处
理器、编译器、汇编器和链接器。比如，要用 GNU 编译系统构造示例程序，我们就要通过
在外壳中输入下列命令行来调用 GCC 驱动程序：

    unix> gcc -O2 -g -o p main.c swap.c

驱动程序在将示例程序从 ASCII 码源文件翻译成可执行目标文件时的行为：

1. 运行 C 预处理其（cpp），将 C 源程序 main.c 翻译成一个 ASCII 码的中间文件 main.i

    unix> cpp [other arguments] main.c /tmp/main.i

2. 运行 C 编译器（cc1），它将 main.i 翻译成一个 ASCII 汇编语言文件 main.s

    unix> cc1 /tmp/main.c -O2 [other arguments] -o /tmp/main.s

3. 运行汇编器（as），它将 main.s 翻译成一个可重定位目标文件（relocatable object file）main.o:

    unix> as [other arguments] -o /tmp/main.o /tmp/main.s

4. 运行链接器 ld，将 main.o 和 swap.o（驱动程序经过相同的过程生成 swap.o） 以及一
   些必要的系统目标文件组合起来，创建一个可执行目标文件（executable object file）
   p：

    unix> ld -o p [system object files and args] /tmp/main.o /tmp/swap.o
        p449~p450

要运行可执行文件 p，我们在 UNIX 外壳的命令行上输入它的名字：

    unix> ./p

外壳调用操作系统中一个叫做加载器的函数，它拷贝可执行文件 p 中的代码和数据到存储
器，然后将控制转移到这个程序的开头。
        p450

像 UNIX ld 程序这样的静态链接器（static linker）以一组可重定位目标文件和命令行参
数作为输入，生成一个完全链接的可以加载和运行的可执行目标文件作为输出。

输入的可重定位目标文件由各种不同的代码和数据节（section）组成。指令在一个节中，
初始化的全局变量在另一个节中，而未初始化的变量又在另外一个节中。
        p450

为了构造可执行文件，链接器必须完成两个主要任务：

    o 符号解析（symbol resolution）

      目标文件定义和引用符号。符号解析的目的是将每个符号引用刚好和一个符号定义联
      系起来

    o 重定位（relocation）

      编译器和汇编器生成从地址 0 开始的代码和数据节。链接器通过把每个符号定义与
      一个存储器位置联系起来，然后修改所有对这些符号的引用，使得他们指向这个存储
      器位置，从而重定位这些节

要记住关于链接器的一些基本事实：目标文件纯粹是字节块的集合。

这些块中，有些包含程序代码，有些则包含程序数据，而其他的则包含知道链接器和加载器
的数据结构。链接器将这些块连接起来，确定被连接块的运行时位置，并且修改代码和数据
块中的各种位置。

链接器对目标机器了解甚少。产生目标文件的编译器和汇编器已经完成了大部分工作。
        p450
